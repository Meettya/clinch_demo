// Generated by clinch 0.4.1
(function() {
  'use strict';
  
  var dependencies, sources, require, modules_cache = {};
  dependencies = {"591123420":{"./tmpl/hb_template":1291702702,"./tmpl/hb_example1":943287731,"./tmpl/hb_example2":225482903,"./tmpl/hb_example3":320556390,"./tmpl/hb_example4":4032429066}};

  sources = {
"225482903": function(exports, module, require) {
// /Users/meettya/github/clinch_demo/src/tmpl/hb_example2.handlebars 
module.exports = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, self=this, functionType="function", blockHelperMissing=helpers.blockHelperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1, stack2, options;
  buffer += "<li>";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers.link_to || depth0.link_to),stack1 ? stack1.call(depth0, depth0, options) : helperMissing.call(depth0, "link_to", depth0, options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</li>";
  return buffer;
  }

  buffer += "<ul>";
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data};
  if (stack1 = helpers.posts) { stack1 = stack1.call(depth0, options); }
  else { stack1 = depth0.posts; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if (!helpers.posts) { stack1 = blockHelperMissing.call(depth0, stack1, options); }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</ul>";
  return buffer;
  }
},
"320556390": function(exports, module, require) {
// /Users/meettya/github/clinch_demo/src/tmpl/hb_example3.handlebars 
module.exports = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, options, functionType="function", escapeExpression=this.escapeExpression, self=this, blockHelperMissing=helpers.blockHelperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1, options;
  buffer += "<li>";
  options = {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data};
  if (stack1 = helpers.link) { stack1 = stack1.call(depth0, options); }
  else { stack1 = depth0.link; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if (!helpers.link) { stack1 = blockHelperMissing.call(depth0, stack1, options); }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</li>";
  return buffer;
  }
function program2(depth0,data) {
  
  var stack1;
  if (stack1 = helpers.name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  return escapeExpression(stack1);
  }

  buffer += "<ul>";
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data};
  if (stack1 = helpers.people) { stack1 = stack1.call(depth0, options); }
  else { stack1 = depth0.people; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if (!helpers.people) { stack1 = blockHelperMissing.call(depth0, stack1, options); }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</ul>";
  return buffer;
  }
},
"591123420": function(exports, module, require) {
// /Users/meettya/github/clinch_demo/src/hb_greater.coffee 
/*
This is simple test case for Handlebars-powered template engine
must work in browser only
*/

/*
This function render results with Handlebars template and given data
*/

var example1, example2, example3, example4, greater;

greater = function(data) {
  var res, template, template_fn;
  template_fn = require('./tmpl/hb_template');
  template = Handlebars.template(template_fn);
  return res = template(data);
};

/*
This is from hb example
*/


example1 = function(data) {
  var res, template, template_fn;
  template_fn = require('./tmpl/hb_example1');
  template = Handlebars.template(template_fn);
  return res = template(data);
};

/*
This is from hb example
*/


example2 = function(data) {
  var res, template, template_fn;
  Handlebars.registerHelper('link_to', function(context) {
    return "<a href='" + context.url + "'>" + context.body + "</a>";
  });
  template_fn = require('./tmpl/hb_example2');
  template = Handlebars.template(template_fn);
  return res = template(data);
};

/*
This is from hb example
*/


example3 = function(data) {
  var res, template, template_fn;
  Handlebars.registerHelper('link', function(options) {
    return "<a href='/people/" + this.id + "'>" + (options.fn(this)) + "</a>";
  });
  template_fn = require('./tmpl/hb_example3');
  template = Handlebars.template(template_fn);
  return res = template(data);
};

/*
This is from hb example
*/


example4 = function(data) {
  var res, template, template_fn;
  Handlebars.registerHelper('agree_button', function() {
    return new Handlebars.SafeString("<button>I agree. I " + this.emotion + " " + this.name + "</button>");
  });
  template_fn = require('./tmpl/hb_example4');
  template = Handlebars.template(template_fn);
  return res = template(data);
};

module.exports = {
  greater: greater,
  example1: example1,
  example2: example2,
  example3: example3,
  example4: example4
};

},
"943287731": function(exports, module, require) {
// /Users/meettya/github/clinch_demo/src/tmpl/hb_example1.handlebars 
module.exports = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, functionType="function", escapeExpression=this.escapeExpression, self=this, blockHelperMissing=helpers.blockHelperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "<li>";
  if (stack1 = helpers.name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + " is ";
  if (stack1 = helpers.age) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.age; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</li>";
  return buffer;
  }

  buffer += "<p>Hello, my name is ";
  if (stack1 = helpers.name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ". I am from ";
  if (stack1 = helpers.hometown) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.hometown; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ". \nI have "
    + escapeExpression(((stack1 = ((stack1 = depth0.kids),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " kids:</p>\n<ul>";
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data};
  if (stack2 = helpers.kids) { stack2 = stack2.call(depth0, options); }
  else { stack2 = depth0.kids; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  if (!helpers.kids) { stack2 = blockHelperMissing.call(depth0, stack2, options); }
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</ul>";
  return buffer;
  }
},
"1291702702": function(exports, module, require) {
// /Users/meettya/github/clinch_demo/src/tmpl/hb_template.handlebars 
module.exports = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"message\"><p>Hello ";
  if (stack1 = helpers.name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "!!!</p></div>";
  return buffer;
  }
},
"4032429066": function(exports, module, require) {
// /Users/meettya/github/clinch_demo/src/tmpl/hb_example4.handlebars 
module.exports = function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <li>";
  if (stack1 = helpers.agree_button) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.agree_button; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</li>\n  ";
  return buffer;
  }

  buffer += "<ul>\n  ";
  stack1 = helpers.each.call(depth0, depth0.items, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>";
  return buffer;
  }
}};
if(this.clinch_runtime_v2 == null) {
  throw Error("Resolve clinch runtime library version |2| first!");
}

require = this.clinch_runtime_v2.require_builder(dependencies, sources, modules_cache);

/* bundle export */
this.clinch_demo = {
  main : require(591123420)
};
}).call(this);